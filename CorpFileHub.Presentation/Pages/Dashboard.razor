@page "/dashboard"
@using CorpFileHub.Domain.Interfaces.Repositories
@using CorpFileHub.Application.Services
@using CorpFileHub.Application.DTOs
@using CorpFileHub.Domain.Enums
@using Microsoft.JSInterop
@inject IUserRepository UserRepository
@inject IFileRepository FileRepository
@inject IFolderRepository FolderRepository
@inject IAuditLogRepository AuditLogRepository
@inject IFileManagementService FileManagementService
@inject IJSRuntime JSRuntime

<PageTitle>Панель управления - CorpFileHub</PageTitle>

<div class="dashboard-container">
    <!-- Заголовок -->
    <div class="dashboard-header">
        <h1 class="dashboard-title">
            <i class="bi bi-graph-up text-warning me-3"></i>
            Панель управления системы
        </h1>
        <p class="dashboard-subtitle">Мониторинг и статистика CorpFileHub</p>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner-border text-warning" style="width: 3rem; height: 3rem;" role="status">
                <span class="visually-hidden">Загрузка...</span>
            </div>
            <p class="mt-3 text-muted">Загрузка статистики...</p>
        </div>
    }
    else
    {
        <!-- Основные метрики -->
        <div class="metrics-grid">
            <div class="metric-card metric-primary">
                <div class="metric-icon">
                    <i class="bi bi-people-fill"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@totalUsers</h3>
                    <p class="metric-label">Активных пользователей</p>
                    <small class="metric-change positive">+@newUsersThisMonth за месяц</small>
                </div>
            </div>

            <div class="metric-card metric-success">
                <div class="metric-icon">
                    <i class="bi bi-files"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@totalFiles</h3>
                    <p class="metric-label">Всего файлов</p>
                    <small class="metric-change positive">+@newFilesThisWeek за неделю</small>
                </div>
            </div>

            <div class="metric-card metric-info">
                <div class="metric-icon">
                    <i class="bi bi-folder-fill"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@totalFolders</h3>
                    <p class="metric-label">Папок</p>
                    <small class="metric-change neutral">@newFoldersThisWeek за неделю</small>
                </div>
            </div>

            <div class="metric-card metric-warning">
                <div class="metric-icon">
                    <i class="bi bi-hdd"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@FormatBytes(totalStorageUsed)</h3>
                    <p class="metric-label">Использовано места</p>
                    <small class="metric-change neutral">@totalVersionsCount версий</small>
                </div>
            </div>
        </div>

        <!-- Графики и детальная статистика -->
        <div class="row mt-4">
            <div class="col-lg-8">
                <!-- График активности -->
                <div class="dashboard-card">
                    <div class="card-header">
                        <h5 class="card-title">
                            <i class="bi bi-activity text-warning me-2"></i>
                            Активность пользователей (последние 7 дней)
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (activityData.Any())
                        {
                            <div class="activity-chart">
                                @foreach (var day in activityData.OrderBy(a => a.Date))
                                {
                                    var barHeight = day.ActionsCount > 0 ? Math.Max(5, (day.ActionsCount * 100 / maxDailyActions)) : 5;
                                    <div class="chart-bar-container">
                                        <div class="chart-bar" style="height: @(barHeight)%" title="@day.Date.ToString("dd.MM"): @day.ActionsCount действий">
                                        </div>
                                        <span class="chart-label">@day.Date.ToString("dd.MM")</span>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="no-data">
                                <i class="bi bi-graph-up text-muted" style="font-size: 3rem;"></i>
                                <p class="text-muted mt-2">Нет данных для отображения</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
                <!-- Топ файлов -->
                <div class="dashboard-card">
                    <div class="card-header">
                        <h5 class="card-title">
                            <i class="bi bi-star-fill text-warning me-2"></i>
                            Популярные файлы
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (topFiles.Any())
                        {
                            <div class="top-files-list">
                                @foreach (var file in topFiles.Take(5))
                                {
                                    <div class="top-file-item">
                                        <div class="file-icon">
                                            <i class="@GetFileIcon(file.Extension)"></i>
                                        </div>
                                        <div class="file-info">
                                            <div class="file-name" title="@file.Name">
                                                @TruncateText(file.Name, 20)
                                            </div>
                                            <small class="file-meta text-muted">
                                                @FormatBytes(file.Size)
                                            </small>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="no-data">
                                <i class="bi bi-files text-muted" style="font-size: 2rem;"></i>
                                <p class="text-muted mt-2">Нет файлов</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Последние действия и системная информация -->
        <div class="row mt-4">
            <div class="col-lg-6">
                <!-- Последние действия -->
                <div class="dashboard-card">
                    <div class="card-header">
                        <h5 class="card-title">
                            <i class="bi bi-clock-history text-warning me-2"></i>
                            Последние действия
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (recentActions.Any())
                        {
                            <div class="recent-actions-list">
                                @foreach (var action in recentActions.Take(10))
                                {
                                    <div class="action-item">
                                        <div class="action-icon">
                                            <i class="@action.ActionIcon"></i>
                                        </div>
                                        <div class="action-content">
                                            <div class="action-text">
                                                <strong>@action.UserName</strong> @GetActionDescription(action.Action)
                                                @if (!string.IsNullOrEmpty(action.EntityName))
                                                {
                                                    <span class="entity-name">"@action.EntityName"</span>
                                                }
                                            </div>
                                            <small class="action-time text-muted">@action.RelativeTime</small>
                                        </div>
                                        <div class="action-status">
                                            <i class="@action.StatusIcon"></i>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="no-data">
                                <i class="bi bi-clock-history text-muted" style="font-size: 2rem;"></i>
                                <p class="text-muted mt-2">Нет действий</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-lg-6">
                <!-- Системная информация -->
                <div class="dashboard-card">
                    <div class="card-header">
                        <h5 class="card-title">
                            <i class="bi bi-info-circle text-warning me-2"></i>
                            Системная информация
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="system-info-list">
                            <div class="info-item">
                                <span class="info-label">Время работы сервера:</span>
                                <span class="info-value">@serverUptime</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Версия системы:</span>
                                <span class="info-value">CorpFileHub v1.0.0</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">База данных:</span>
                                <span class="info-value">PostgreSQL</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Последний бэкап:</span>
                                <span class="info-value">@lastBackupDate</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Активных подключений:</span>
                                <span class="info-value">@activeConnections</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Кнопки действий -->
        <div class="dashboard-actions mt-4">
            <button class="btn btn-yellow me-2" @onclick="RefreshDashboard">
                <i class="bi bi-arrow-clockwise me-1"></i>
                Обновить
            </button>
            <button class="btn btn-outline-warning me-2" @onclick="NavigateToAudit">
                <i class="bi bi-journal-text me-1"></i>
                Журнал аудита
            </button>
            <button class="btn btn-outline-warning" @onclick="NavigateToUsers">
                <i class="bi bi-people me-1"></i>
                Управление пользователями
            </button>
        </div>
    }
</div>

<style>
    .dashboard-container {
        padding: 2rem;
        background: linear-gradient(135deg, #fff9c4 0%, #ffffff 100%);
        min-height: 100vh;
    }

    .dashboard-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .dashboard-title {
        font-size: 2.5rem;
        font-weight: 700;
        color: #333;
        margin-bottom: 0.5rem;
    }

    .dashboard-subtitle {
        font-size: 1.1rem;
        color: #666;
        margin: 0;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 400px;
    }

    .metrics-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .metric-card {
        background: white;
        border-radius: 15px;
        padding: 1.5rem;
        box-shadow: 0 8px 25px rgba(255, 193, 7, 0.1);
        border: 2px solid transparent;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .metric-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px rgba(255, 193, 7, 0.2);
        border-color: #ffc107;
    }

    .metric-icon {
        font-size: 2.5rem;
        width: 60px;
        height: 60px;
        border-radius: 15px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
    }

    .metric-primary .metric-icon { background: linear-gradient(135deg, #007bff, #0056b3); }
    .metric-success .metric-icon { background: linear-gradient(135deg, #28a745, #1e7e34); }
    .metric-info .metric-icon { background: linear-gradient(135deg, #17a2b8, #117a8b); }
    .metric-warning .metric-icon { background: linear-gradient(135deg, #ffc107, #e0a800); }

    .metric-content {
        flex: 1;
    }

    .metric-value {
        font-size: 2rem;
        font-weight: 700;
        margin: 0;
        color: #333;
    }

    .metric-label {
        font-size: 0.9rem;
        color: #666;
        margin: 0.25rem 0;
    }

    .metric-change {
        font-size: 0.8rem;
        font-weight: 600;
    }

    .metric-change.positive { color: #28a745; }
    .metric-change.negative { color: #dc3545; }
    .metric-change.neutral { color: #6c757d; }

    .dashboard-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 8px 25px rgba(255, 193, 7, 0.1);
        border: 2px solid rgba(255, 193, 7, 0.2);
        margin-bottom: 1.5rem;
        overflow: hidden;
    }

    .card-header {
        background: linear-gradient(135deg, #fff9c4, white);
        border-bottom: 2px solid rgba(255, 193, 7, 0.3);
        padding: 1rem 1.5rem;
    }

    .card-title {
        margin: 0;
        font-weight: 600;
        color: #333;
    }

    .card-body {
        padding: 1.5rem;
    }

    .activity-chart {
        display: flex;
        align-items: end;
        justify-content: space-between;
        height: 200px;
        gap: 0.5rem;
        padding: 1rem 0;
    }

    .chart-bar-container {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        height: 100%;
    }

    .chart-bar {
        background: linear-gradient(to top, #ffc107, #ffeb3b);
        border-radius: 4px 4px 0 0;
        min-height: 5px;
        width: 100%;
        max-width: 30px;
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .chart-bar:hover {
        background: linear-gradient(to top, #ff8f00, #ffc107);
        transform: scaleY(1.1);
    }

    .chart-label {
        font-size: 0.7rem;
        color: #666;
        margin-top: 0.5rem;
        text-align: center;
    }

    .top-files-list, .recent-actions-list {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .top-file-item, .action-item {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 0.75rem;
        background: rgba(255, 193, 7, 0.05);
        border-radius: 8px;
        border: 1px solid rgba(255, 193, 7, 0.2);
        transition: all 0.2s ease;
    }

    .top-file-item:hover, .action-item:hover {
        background: rgba(255, 193, 7, 0.1);
        border-color: #ffc107;
    }

    .file-icon, .action-icon {
        font-size: 1.2rem;
        width: 30px;
        text-align: center;
    }

    .file-info, .action-content {
        flex: 1;
        min-width: 0;
    }

    .file-name, .action-text {
        font-size: 0.9rem;
        font-weight: 500;
        color: #333;
    }

    .file-meta, .action-time {
        font-size: 0.75rem;
        color: #666;
    }

    .entity-name {
        color: #ffc107;
        font-weight: 600;
    }

    .action-status {
        font-size: 1rem;
    }

    .system-info-list {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .info-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem 0;
        border-bottom: 1px solid rgba(255, 193, 7, 0.2);
    }

    .info-item:last-child {
        border-bottom: none;
    }

    .info-label {
        font-weight: 500;
        color: #666;
    }

    .info-value {
        font-weight: 600;
        color: #333;
    }

    .dashboard-actions {
        text-align: center;
        padding: 2rem 0;
    }

    .no-data {
        text-align: center;
        padding: 2rem;
        color: #999;
    }

    @@media (max-width: 768px) {
        .dashboard-container {
            padding: 1rem;
        }

        .metrics-grid {
            grid-template-columns: 1fr;
        }

        .dashboard-title {
            font-size: 2rem;
        }

        .metric-card {
            padding: 1rem;
        }

        .metric-icon {
            font-size: 2rem;
            width: 50px;
            height: 50px;
        }

        .metric-value {
            font-size: 1.5rem;
        }
    }
</style>

@code {
    private bool isLoading = true;
    
    // Метрики
    private int totalUsers = 0;
    private int newUsersThisMonth = 0;
    private int totalFiles = 0;
    private int newFilesThisWeek = 0;
    private int totalFolders = 0;
    private int newFoldersThisWeek = 0;
    private long totalStorageUsed = 0;
    private int totalVersionsCount = 0;
    
    // Данные для графиков
    private List<DailyActivity> activityData = new();
    private int maxDailyActions = 1;
    
    // Списки
    private List<Domain.Entities.FileItem> topFiles = new();
    private List<AuditLogDto> recentActions = new();
    
    // Системная информация
    private string serverUptime = "";
    private string lastBackupDate = "Не выполнялся";
    private int activeConnections = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        isLoading = true;
        
        try
        {
            // Загружаем основные метрики
            await LoadBasicMetrics();
            
            // Загружаем данные активности
            await LoadActivityData();
            
            // Загружаем топ файлы
            await LoadTopFiles();
            
            // Загружаем последние действия
            await LoadRecentActions();
            
            // Загружаем системную информацию
            LoadSystemInfo();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Ошибка загрузки данных дашборда", ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadBasicMetrics()
    {
        // Пользователи
        var users = await UserRepository.GetAllAsync();
        totalUsers = users.Count();
        newUsersThisMonth = users.Count(u => u.CreatedAt >= DateTime.UtcNow.AddDays(-30));

        // Файлы
        var allFiles = new List<Domain.Entities.FileItem>();
        var folders = await FolderRepository.GetByParentIdAsync(null);
        await LoadAllFiles(folders, allFiles);
        
        totalFiles = allFiles.Count;
        newFilesThisWeek = allFiles.Count(f => f.CreatedAt >= DateTime.UtcNow.AddDays(-7));
        totalStorageUsed = allFiles.Sum(f => f.Size);
        totalVersionsCount = allFiles.SelectMany(f => f.Versions).Count();

        // Папки
        var allFolders = new List<Domain.Entities.Folder>();
        await LoadAllFolders(null, allFolders);
        totalFolders = allFolders.Count;
        newFoldersThisWeek = allFolders.Count(f => f.CreatedAt >= DateTime.UtcNow.AddDays(-7));
    }

    private async Task LoadAllFiles(IEnumerable<Domain.Entities.Folder> folders, List<Domain.Entities.FileItem> allFiles)
    {
        foreach (var folder in folders)
        {
            var files = await FileRepository.GetByFolderIdAsync(folder.Id);
            allFiles.AddRange(files);
            
            var subFolders = await FolderRepository.GetByParentIdAsync(folder.Id);
            await LoadAllFiles(subFolders, allFiles);
        }
    }

    private async Task LoadAllFolders(int? parentId, List<Domain.Entities.Folder> allFolders)
    {
        var folders = await FolderRepository.GetByParentIdAsync(parentId);
        allFolders.AddRange(folders);
        
        foreach (var folder in folders)
        {
            await LoadAllFolders(folder.Id, allFolders);
        }
    }

    private async Task LoadActivityData()
    {
        activityData = new List<DailyActivity>();
        
        for (int i = 6; i >= 0; i--)
        {
            var date = DateTime.UtcNow.AddDays(-i).Date;
            var nextDate = date.AddDays(1);
            
            var actions = await AuditLogRepository.SearchAsync("", date, nextDate);
            var actionsCount = actions.Count();
            
            activityData.Add(new DailyActivity
            {
                Date = date,
                ActionsCount = actionsCount
            });
        }
        
        maxDailyActions = activityData.Max(a => a.ActionsCount);
        if (maxDailyActions == 0) maxDailyActions = 1;
    }

    private async Task LoadTopFiles()
    {
        // Загружаем файлы и сортируем по размеру
        var allFiles = new List<Domain.Entities.FileItem>();
        var rootFolders = await FolderRepository.GetByParentIdAsync(null);
        await LoadAllFiles(rootFolders, allFiles);
        
        topFiles = allFiles.OrderByDescending(f => f.Size).Take(5).ToList();
    }

    private async Task LoadRecentActions()
    {
        var auditLogs = await AuditLogRepository.SearchAsync("", DateTime.UtcNow.AddDays(-7), DateTime.UtcNow);
        
        recentActions = auditLogs.Take(10).Select(al => new AuditLogDto
        {
            Id = al.Id,
            UserId = al.UserId,
            UserName = al.User?.FullName ?? "Неизвестный пользователь",
            Action = al.Action,
            EntityType = al.EntityType,
            EntityId = al.EntityId,
            EntityName = al.EntityName,
            Description = al.Description,
            CreatedAt = al.CreatedAt,
            IsSuccess = al.IsSuccess
        }).ToList();
    }

    private void LoadSystemInfo()
    {
        // Время работы сервера (приблизительно)
        var uptime = DateTime.UtcNow - DateTime.UtcNow.Date;
        serverUptime = $"{uptime.Hours}ч {uptime.Minutes}м";
        
        // Активные подключения (заглушка)
        activeConnections = Random.Shared.Next(5, 25);
    }

    private async Task RefreshDashboard()
    {
        await LoadDashboardData();
        StateHasChanged();
    }

    private async Task NavigateToAudit()
    {
        await JSRuntime.InvokeVoidAsync("window.location.assign", "/admin/audit");
    }

    private async Task NavigateToUsers()
    {
        await JSRuntime.InvokeVoidAsync("window.location.assign", "/admin/users");
    }

    // Вспомогательные методы
    private string FormatBytes(long bytes)
    {
        string[] suffixes = { "B", "KB", "MB", "GB", "TB" };
        int counter = 0;
        decimal number = bytes;
        
        while (Math.Round(number / 1024) >= 1)
        {
            number /= 1024;
            counter++;
        }
        
        return $"{number:n1} {suffixes[counter]}";
    }

    private string GetFileIcon(string extension)
    {
        return extension.ToLower() switch
        {
            ".docx" or ".doc" => "bi bi-file-earmark-word text-primary",
            ".xlsx" or ".xls" => "bi bi-file-earmark-excel text-success",
            ".pptx" or ".ppt" => "bi bi-file-earmark-ppt text-warning",
            ".pdf" => "bi bi-file-earmark-pdf text-danger",
            ".txt" => "bi bi-file-earmark-text text-secondary",
            ".jpg" or ".jpeg" or ".png" or ".gif" or ".bmp" => "bi bi-file-earmark-image text-info",
            _ => "bi bi-file-earmark text-secondary"
        };
    }

    private string TruncateText(string text, int maxLength)
    {
        if (text.Length <= maxLength) return text;
        return text.Substring(0, maxLength - 3) + "...";
    }

    private string GetActionDescription(AuditAction action)
    {
        return action switch
        {
            AuditAction.FileUpload => "загрузил файл",
            AuditAction.FileDownload => "скачал файл",
            AuditAction.FileEdit => "редактировал файл",
            AuditAction.FileDelete => "удалил файл",
            AuditAction.FolderCreate => "создал папку",
            AuditAction.FolderDelete => "удалил папку",
            AuditAction.Login => "вошел в систему",
            AuditAction.Logout => "вышел из системы",
            _ => "выполнил действие"
        };
    }

    public class DailyActivity
    {
        public DateTime Date { get; set; }
        public int ActionsCount { get; set; }
    }
}