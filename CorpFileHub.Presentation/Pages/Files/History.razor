@page "/files/{Id:int}/history"
@using CorpFileHub.Application.DTOs
@inject HttpClient Http
@inject IJSRuntime JS

<h3 class="mb-3">История версий</h3>

@if (versions == null)
{
    <p>Загрузка...</p>
}
else if (!versions.Any())
{
    <p>История пуста</p>
}
else
{
    <table class="table table-sm">
        <thead>
            <tr>
                <th>Версия</th>
                <th>Дата</th>
                <th>Автор</th>
                <th>Комментарий</th>
                <th>Размер</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        @foreach (var v in versions)
        {
            <tr>
                <td>@v.Version</td>
                <td>@v.CreatedAt.ToLocalTime().ToString("g")</td>
                <td>@v.CreatedByName</td>
                <td>@v.Comment</td>
                <td>@v.FormattedSize</td>
                <td>
                    <a class="btn btn-link p-0 me-2" href="@($"/api/files/{Id}/versions/{v.Id}/download")">Скачать</a>
                    @if (!v.IsActive)
                    {
                        <button class="btn btn-link p-0" @onclick="() => Rollback(v.Id)">Откатить</button>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    [Parameter] public int Id { get; set; }
    private List<FileVersionDto>? versions;

    protected override async Task OnParametersSetAsync()
    {
        versions = await Http.GetFromJsonAsync<List<FileVersionDto>>($"api/files/{Id}/versions");
    }

    private async Task Rollback(int versionId)
    {
        var comment = await JS.InvokeAsync<string?>("prompt", "Причина отката?");
        await Http.PostAsJsonAsync($"api/files/{Id}/rollback/{versionId}", new RollbackRequest { Comment = comment ?? string.Empty });
        versions = await Http.GetFromJsonAsync<List<FileVersionDto>>($"api/files/{Id}/versions");
        StateHasChanged();
    }

    private class RollbackRequest
    {
        public string Comment { get; set; } = string.Empty;
    }
}
