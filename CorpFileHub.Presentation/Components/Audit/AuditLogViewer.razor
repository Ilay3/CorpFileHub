@using CorpFileHub.Application.UseCases.Audit
@using Microsoft.AspNetCore.WebUtilities
@inject HttpClient Http

<div class="mb-3 d-flex">
    <InputDate @bind-Value="dateFrom" class="form-control me-2" />
    <InputDate @bind-Value="dateTo" class="form-control me-2" />
    <button class="btn btn-primary" @onclick="LoadLogs">Показать</button>
</div>

@if (result == null)
{
    <p>Загрузка...</p>
}
else if (!result.Items.Any())
{
    <p>Нет записей</p>
}
else
{
    <table class="table table-striped table-sm">
        <thead>
            <tr>
                <th>Дата</th>
                <th>Пользователь</th>
                <th>Действие</th>
                <th>Объект</th>
                <th>Описание</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var log in result.Items)
            {
                <tr>
                    <td>@log.FormattedDate</td>
                    <td>@log.UserName</td>
                    <td>@log.ActionText</td>
                    <td>@log.EntityName</td>
                    <td>@log.Description</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private AuditLogPagedResult? result;
    private DateTime? dateFrom;
    private DateTime? dateTo;

    protected override async Task OnInitializedAsync()
    {
        await LoadLogs();
    }

    private async Task LoadLogs()
    {
        var query = new Dictionary<string, string?>
        {
            ["Page"] = "1",
            ["PageSize"] = "50",
            ["DateFrom"] = dateFrom.HasValue ? dateFrom.Value.ToString("yyyy-MM-dd") : null,
            ["DateTo"] = dateTo.HasValue ? dateTo.Value.ToString("yyyy-MM-dd") : null
        };

        var url = QueryHelpers.AddQueryString("api/audit", query);
        result = await Http.GetFromJsonAsync<AuditLogPagedResult>(url);
    }
}

