@inject HttpClient Http

@if (IsVisible)
{
    <div class="modal-overlay">
        <div class="modal-container">
            <div class="modal-header-yellow">
                <h5 class="modal-title">
                    <i class="bi bi-shield-lock text-warning me-2"></i>
                    Права доступа
                </h5>
                <button type="button" class="btn-close-yellow" @onclick="Close">
                    <i class="bi bi-x"></i>
                </button>
            </div>
            <div class="modal-body-yellow">
                @if (accessList == null)
                {
                    <p>Загрузка...</p>
                }
                else
                {
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Пользователь</th>
                                <th>Уровень</th>
                                <th>Действует до</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var a in accessList)
                        {
                            <tr>
                                <td>@a.UserName (@a.UserEmail)</td>
                                <td>@a.AccessLevelText</td>
                                <td>@(a.ExpiresAt?.ToString("g") ?? "-")</td>
                            </tr>
                        }
                        </tbody>
                    </table>

                    <EditForm Model="model" OnValidSubmit="SaveAsync">
                        <DataAnnotationsValidator />
                        <div class="form-group-yellow">
                            <label for="user" class="form-label-yellow">Пользователь</label>
                            <select id="user" class="form-control-yellow" @bind="model.UserId">
                                <option value="0">-- выберите --</option>
                                @foreach (var u in users)
                                {
                                    <option value="@u.Id">@u.FullName (@u.Email)</option>
                                }
                            </select>
                        </div>
                        <div class="form-group-yellow">
                            <label for="level" class="form-label-yellow">Уровень доступа</label>
                            <select id="level" class="form-control-yellow" @bind="model.AccessLevel">
                                <option value="@AccessLevel.Read">Чтение</option>
                                <option value="@AccessLevel.Write">Чтение/запись</option>
                                <option value="@AccessLevel.Delete">Полный</option>
                            </select>
                        </div>
                        <div class="form-group-yellow">
                            <label for="expires" class="form-label-yellow">Истекает</label>
                            <InputDate id="expires" class="form-control-yellow" @bind-Value="model.ExpiresAt" />
                        </div>
                        <div class="modal-footer-yellow">
                            <button type="submit" class="btn-primary-yellow">Сохранить</button>
                            <button type="button" class="btn-secondary-yellow" @onclick="Close">Отмена</button>
                        </div>
                    </EditForm>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert-yellow alert-danger">@errorMessage</div>
                    }
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public string EntityType { get; set; } = "File"; // File or Folder
    [Parameter] public int EntityId { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnChanged { get; set; }

    private List<UserAccessInfo>? accessList;
    private List<UserDto> users = new();
    private AccessModel model = new();
    private string? errorMessage;

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible)
        {
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        try
        {
            accessList = EntityType == "File"
                ? await Http.GetFromJsonAsync<List<UserAccessInfo>>($"api/access/files/{EntityId}")
                : await Http.GetFromJsonAsync<List<UserAccessInfo>>($"api/access/folders/{EntityId}");
            var userResult = await Http.GetFromJsonAsync<List<UserDto>>("api/users");
            if (userResult != null)
                users = userResult;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task SaveAsync()
    {
        errorMessage = null;
        try
        {
            if (EntityType == "File")
            {
                await Http.PostAsJsonAsync($"api/access/files/{EntityId}", new SetFileAccessRequest
                {
                    UserId = model.UserId,
                    AccessLevel = model.AccessLevel,
                    ExpiresAt = model.ExpiresAt
                });
            }
            else
            {
                await Http.PostAsJsonAsync($"api/access/folders/{EntityId}", new SetFolderAccessRequest
                {
                    UserId = model.UserId,
                    AccessLevel = model.AccessLevel,
                    ExpiresAt = model.ExpiresAt
                });
            }
            await LoadData();
            model = new AccessModel();
            if (OnChanged.HasDelegate)
                await OnChanged.InvokeAsync(null);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task Close()
    {
        if (OnClose.HasDelegate)
            await OnClose.InvokeAsync(null);
    }

    class AccessModel
    {
        public int UserId { get; set; }
        public AccessLevel AccessLevel { get; set; } = AccessLevel.Read;
        public DateTime? ExpiresAt { get; set; }
    }

    class UserDto
    {
        public int Id { get; set; }
        public string FullName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
    }
}

<style>
.modal-overlay { position: fixed; top:0; left:0; right:0; bottom:0; background: rgba(0,0,0,0.5); display:flex; align-items:center; justify-content:center; z-index:1050; }
.modal-container { background:white; border-radius:5px; width: 500px; max-width:90%; }
.modal-header-yellow { background:linear-gradient(135deg, #ffc107, #ffeb3b); padding:1rem; display:flex; align-items:center; justify-content:space-between; border-radius:5px 5px 0 0; }
.modal-body-yellow { padding:1rem; }
.modal-footer-yellow { padding:0 1rem 1rem 1rem; display:flex; justify-content:flex-end; gap:.5rem; }
.btn-close-yellow { background:none; border:none; }
.form-control-yellow { width:100%; padding:0.5rem; }
.form-group-yellow { margin-bottom:1rem; }
.alert-yellow { margin-top:0.5rem; }
</style>
