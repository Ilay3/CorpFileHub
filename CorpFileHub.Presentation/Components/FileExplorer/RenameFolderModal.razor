@if (IsVisible)
{
    <div class="modal-overlay">
        <div class="modal-container">
            <div class="modal-header-yellow">
                <h5 class="modal-title">
                    <i class="bi bi-pencil-square text-warning me-2"></i>
                    Переименование папки
                </h5>
                <button type="button" class="btn-close-yellow" @onclick="Cancel">
                    <i class="bi bi-x"></i>
                </button>
            </div>
            <EditForm Model="model" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <div class="modal-body-yellow">
                    <div class="form-group-yellow">
                        <label class="form-label-yellow" for="newName">Новое имя</label>
                        <div class="input-wrapper-yellow">
                            <InputText id="newName" class="form-control-yellow" @bind-Value="model.NewName" />
                        </div>
                        <ValidationMessage For="@(() => model.NewName)" class="validation-message-yellow" />
                    </div>
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert-yellow alert-danger">@ErrorMessage</div>
                    }
                </div>
                <div class="modal-footer-yellow">
                    <button type="button" class="btn-secondary-yellow" @onclick="Cancel">Отмена</button>
                    <button type="submit" class="btn-primary-yellow" disabled="@string.IsNullOrWhiteSpace(model.NewName)">Сохранить</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public int FolderId { get; set; }
    [Parameter] public string CurrentName { get; set; } = string.Empty;
    [Parameter] public EventCallback OnSuccess { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    [Inject] public HttpClient Http { get; set; } = default!;

    private RenameModel model = new();
    private string ErrorMessage = string.Empty;

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            model = new RenameModel { NewName = CurrentName };
            ErrorMessage = string.Empty;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/folders/{FolderId}/rename", new { newName = model.NewName });
            if (response.IsSuccessStatusCode)
            {
                await OnSuccess.InvokeAsync();
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                ErrorMessage = error?.error ?? "Ошибка";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }

    public class RenameModel
    {
        [Required(ErrorMessage = "Укажите новое имя")]
        [StringLength(255, ErrorMessage = "Слишком длинное имя")]
        [RegularExpression(@"^[^/\\:*?""<>|]+$", ErrorMessage = "Недопустимые символы")]
        public string NewName { get; set; } = string.Empty;
    }

    private class ErrorResponse
    {
        public string? error { get; set; }
    }
}

<style>
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.6);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1050;
}
.modal-container {
    background: white;
    border-radius: 8px;
    width: 90%;
    max-width: 400px;
    border: 3px solid #ffc107;
}
.modal-header-yellow {
    background: linear-gradient(135deg, #ffc107, #ffeb3b);
    padding: 1rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    border-radius: 5px 5px 0 0;
}
.modal-body-yellow { padding: 1rem; }
.modal-footer-yellow { padding: 0 1rem 1rem 1rem; display:flex; justify-content:flex-end; gap: .5rem; }
.btn-close-yellow { background:none; border:none; }
.form-control-yellow { width:100%; padding:0.5rem; }
.form-group-yellow { margin-bottom:1rem; }
.alert-yellow { margin-top:0.5rem; }
.validation-message-yellow { color:red; font-size:0.875rem; }
.btn-primary-yellow { background:#ffc107; border:none; padding:0.5rem 1rem; }
.btn-secondary-yellow { background:#6c757d; border:none; padding:0.5rem 1rem; color:white; }
</style>
