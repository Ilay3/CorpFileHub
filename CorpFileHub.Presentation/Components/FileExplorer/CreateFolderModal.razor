@using CorpFileHub.Domain.Entities
@using CorpFileHub.Application.UseCases.Folders
@using System.ComponentModel.DataAnnotations
@inject CreateFolderUseCase CreateFolderUseCase
@inject IJSRuntime JSRuntime

@if (IsVisible)
{
    <div class="modal-overlay">
        <div class="modal-container">
            <div class="modal-header-yellow">
                <h5 class="modal-title">
                    <i class="bi bi-folder-plus text-warning me-2"></i>
                    Создание новой папки
                </h5>
                <button type="button" class="btn-close-yellow" @onclick="Cancel" disabled="@isCreating">
                    <i class="bi bi-x"></i>
                </button>
            </div>

            <EditForm Model="model" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />

                <div class="modal-body-yellow">
                    <!-- Ошибки -->
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert-yellow alert-danger">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            @errorMessage
                        </div>
                    }

                    <!-- Поле названия папки -->
                    <div class="form-group-yellow">
                        <label for="folderName" class="form-label-yellow">
                            Название папки <span class="text-danger">*</span>
                        </label>
                        <div class="input-wrapper-yellow">
                            <i class="bi bi-folder input-icon text-warning"></i>
                            <InputText id="folderName"
                                       class="form-control-yellow"
                                       placeholder="Введите название папки"
                                       @bind-Value="model.Name"
                                       @onkeyup="OnNameChange" />
                        </div>
                        <ValidationMessage For="@(() => model.Name)" class="validation-message-yellow" />

                        @if (!string.IsNullOrEmpty(model.Name))
                        {
                            <div class="form-text-yellow">
                                <i class="bi bi-info-circle me-1"></i>
                                Путь: @GetFullPath()
                            </div>
                        }
                    </div>

                    <!-- Поле описания -->
                    <div class="form-group-yellow">
                        <label for="folderDescription" class="form-label-yellow">
                            Описание
                        </label>
                        <div class="textarea-wrapper-yellow">
                            <InputTextArea id="folderDescription"
                                           class="form-control-yellow"
                                           rows="3"
                                           placeholder="Описание папки (необязательно)"
                                           @bind-Value="model.Description" />
                        </div>
                    </div>

                    <!-- Информация о размещении -->
                    <div class="location-info">
                        @if (ParentFolderId.HasValue)
                        {
                            <div class="info-card">
                                <i class="bi bi-info-circle text-warning me-2"></i>
                                Папка будет создана в: <strong>@parentFolderPath</strong>
                            </div>
                        }
                        else
                        {
                            <div class="info-card">
                                <i class="bi bi-house text-warning me-2"></i>
                                Папка будет создана в <strong>корневом каталоге</strong>
                            </div>
                        }
                    </div>
                </div>

                <div class="modal-footer-yellow">
                    <button type="button" class="btn-secondary-yellow" @onclick="Cancel" disabled="@isCreating">
                        <i class="bi bi-x-circle me-1"></i>
                        Отмена
                    </button>
                    <button type="submit" class="btn-primary-yellow" disabled="@(isCreating || !IsValidName())">
                        @if (isCreating)
                        {
                            <span class="spinner-yellow me-2"></span>
                            <span>Создание...</span>
                        }
                        else
                        {
                            <i class="bi bi-folder-plus me-1"></i>
                            <span>Создать папку</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.6);
        backdrop-filter: blur(3px);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1050;
        animation: fadeIn 0.3s ease-out;
    }

    .modal-container {
        background: white;
        border-radius: 15px;
        box-shadow: 0 20px 60px rgba(255, 193, 7, 0.3);
        border: 3px solid #ffc107;
        width: 90%;
        max-width: 500px;
        animation: slideIn 0.3s ease-out;
    }

    .modal-header-yellow {
        background: linear-gradient(135deg, #ffc107, #ffeb3b);
        color: #333;
        padding: 1.5rem;
        border-radius: 12px 12px 0 0;
        display: flex;
        justify-content: between;
        align-items: center;
        border-bottom: 2px solid rgba(255, 143, 0, 0.3);
    }

    .modal-title {
        font-size: 1.25rem;
        font-weight: 700;
        margin: 0;
        flex-grow: 1;
    }

    .btn-close-yellow {
        background: rgba(255, 255, 255, 0.2);
        border: 2px solid transparent;
        border-radius: 50%;
        width: 35px;
        height: 35px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #333;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .btn-close-yellow:hover {
            background: rgba(255, 143, 0, 0.8);
            color: white;
            transform: rotate(90deg);
        }

    .modal-body-yellow {
        padding: 2rem;
    }

    .form-group-yellow {
        margin-bottom: 1.5rem;
    }

    .form-label-yellow {
        display: block;
        font-weight: 600;
        color: #333;
        margin-bottom: 0.5rem;
        font-size: 0.95rem;
    }

    .input-wrapper-yellow, .textarea-wrapper-yellow {
        position: relative;
    }

    .input-icon {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        z-index: 1;
        font-size: 1.1rem;
    }

    .form-control-yellow {
        width: 100%;
        padding: 12px;
        padding-left: 45px;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        font-size: 1rem;
        transition: all 0.3s ease;
        background: #fefefe;
    }

        .form-control-yellow:focus {
            outline: none;
            border-color: #ffc107;
            box-shadow: 0 0 0 3px rgba(255, 193, 7, 0.2);
            background: white;
        }

    .textarea-wrapper-yellow .form-control-yellow {
        padding-left: 12px;
        resize: vertical;
        min-height: 80px;
    }

    .validation-message-yellow {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        display: block;
    }

    .form-text-yellow {
        color: #6c757d;
        font-size: 0.875rem;
        margin-top: 0.5rem;
        padding: 8px 12px;
        background: rgba(255, 193, 7, 0.1);
        border-radius: 6px;
        border-left: 3px solid #ffc107;
    }

    .location-info {
        margin-top: 1.5rem;
    }

    .info-card {
        background: linear-gradient(135deg, rgba(255, 193, 7, 0.1), rgba(255, 235, 59, 0.1));
        border: 2px solid rgba(255, 193, 7, 0.3);
        border-radius: 8px;
        padding: 1rem;
        font-size: 0.9rem;
        color: #333;
    }

    .alert-yellow {
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1.5rem;
        border: 2px solid;
    }

    .alert-danger {
        background: rgba(220, 53, 69, 0.1);
        border-color: rgba(220, 53, 69, 0.3);
        color: #721c24;
    }

    .modal-footer-yellow {
        padding: 1.5rem;
        border-top: 2px solid rgba(255, 193, 7, 0.2);
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        background: rgba(255, 193, 7, 0.05);
        border-radius: 0 0 12px 12px;
    }

    .btn-primary-yellow, .btn-secondary-yellow {
        padding: 10px 20px;
        border: 2px solid;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        font-size: 0.95rem;
    }

    .btn-primary-yellow {
        background: #ffc107;
        border-color: #ffc107;
        color: #333;
    }

        .btn-primary-yellow:hover:not(:disabled) {
            background: #ff8f00;
            border-color: #ff8f00;
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 143, 0, 0.4);
        }

        .btn-primary-yellow:disabled {
            background: #e0e0e0;
            border-color: #e0e0e0;
            color: #999;
            cursor: not-allowed;
        }

    .btn-secondary-yellow {
        background: transparent;
        border-color: #6c757d;
        color: #6c757d;
    }

        .btn-secondary-yellow:hover:not(:disabled) {
            background: #6c757d;
            color: white;
            transform: translateY(-2px);
        }

    .spinner-yellow {
        width: 16px;
        height: 16px;
        border: 2px solid transparent;
        border-top: 2px solid currentColor;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }

    @@keyframes slideIn {
        from

    {
        opacity: 0;
        transform: translateY(-50px) scale(0.9);
    }

    to {
        opacity: 1;
        transform: translateY(0) scale(1);
    }

    }

    @@keyframes spin {
        to

    {
        transform: rotate(360deg);
    }

    }
</style>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public int? ParentFolderId { get; set; }
    [Parameter] public EventCallback<Folder> OnFolderCreated { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private CreateFolderModel model = new();
    private string errorMessage = "";
    private bool isCreating = false;
    private string parentFolderPath = "";

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible)
        {
            model = new CreateFolderModel();
            errorMessage = "";
            isCreating = false;

            // TODO: Получить путь родительской папки для отображения
            parentFolderPath = ParentFolderId.HasValue ? "Родительская папка" : "";

            // Устанавливаем фокус на поле ввода через небольшую задержку
            await Task.Delay(100);
            try
            {
                await JSRuntime.InvokeVoidAsync("document.getElementById('folderName').focus");
            }
            catch
            {
                // Игнорируем ошибки фокуса
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        if (isCreating) return;

        isCreating = true;
        errorMessage = "";

        try
        {
            // TODO: Получить текущего пользователя из системы аутентификации
            var userId = 1; // Временно используем ID = 1

            var newFolder = await CreateFolderUseCase.ExecuteAsync(
                model.Name.Trim(),
                ParentFolderId,
                userId,
                model.Description?.Trim() ?? "");

            await OnFolderCreated.InvokeAsync(newFolder);
        }
        catch (InvalidOperationException ex)
        {
            errorMessage = ex.Message;
        }
        catch (ArgumentException ex)
        {
            errorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            errorMessage = "Произошла ошибка при создании папки. Попробуйте еще раз.";
            Console.WriteLine($"Ошибка создания папки: {ex.Message}");
        }
        finally
        {
            isCreating = false;
        }
    }

    private async Task Cancel()
    {
        if (!isCreating)
        {
            await OnCancel.InvokeAsync();
        }
    }

    private void OnNameChange()
    {
        errorMessage = "";
    }

    private bool IsValidName()
    {
        if (string.IsNullOrWhiteSpace(model.Name)) return false;

        // Проверяем на недопустимые символы
        var invalidChars = new[] { '/', '\\', ':', '*', '?', '"', '<', '>', '|' };
        return !model.Name.Any(c => invalidChars.Contains(c));
    }

    private string GetFullPath()
    {
        var basePath = ParentFolderId.HasValue ? parentFolderPath : "";
        return $"{basePath}/{model.Name}".TrimStart('/');
    }

    public class CreateFolderModel
    {
        [Required(ErrorMessage = "Название папки обязательно")]
        [StringLength(255, ErrorMessage = "Название не может быть длиннее 255 символов")]
        [RegularExpression(@"^[^/\\:*?""<>|]+$", ErrorMessage = "Название содержит недопустимые символы")]
        public string Name { get; set; } = "";

        [StringLength(1000, ErrorMessage = "Описание не может быть длиннее 1000 символов")]
        public string? Description { get; set; }
    }
}